#!/usr/bin/env bash
#
# transitize
#
# Sequentially create N transit encryption operations
#
# shellcheck disable=SC1090,SC1091,SC1117,SC2059,SC2086,SC2089,SC2090,SC2154

HERE="$(pwd)"
SKYDOME="$(while [ "$HERE" != "/" ] ; do HERE=$(dirname "$HERE"); find "$HERE" -maxdepth 1 -name skydome; done)"
if [ -z "$SKYDOME" ]; then
  SKYDOME=./skydome
fi
. $SKYDOME

PROGRAM="$(basename "$0")"

if [ $# -eq 0 ]
  then
    msg alert "Usage: ${PROGRAM} <number_of_encryption_operations>"
    exit 1
fi

TRANSITIZE=$(openssl rand -hex 4)

check_transit() {
  check_cli_cap
  if [ "$VAULT_CLI_CAP" -eq "1" ]; then
    V_AUTH_CMD="vault secrets list"
  else
    V_AUTH_CMD="vault mounts"
  fi
  if ! $V_AUTH_CMD | grep transit > /dev/null 2>&1; then
    msg alert "No Transit Secrets Engine detected! Be sure to mount Transit at vaultron-transit!"
    exit 1
  else
    msg info "Transit Secrets Engine detected - creating key ..."
  fi
}

generate_key() {
  msg info "Generating a transit encryption key as vaultron-key ..."
  if ! vault write -f \
    vaultron-transit/keys/vaultron-key > /dev/null 2>&1; then
      msg alert "Failed to generate the encryption key!"
      exit 1
  fi
  msg complete "Generated encryption key!"
}

encrypt_plaintext() {
  msg secret "Performing $1 Plaintext encyption operations ..."
  printf '[@] '
  for _ in $(seq "$1"); do
    PLAINTEXT="$(uuidgen)"
    echo "PLAINTEXT: $PLAINTEXT" >> ./tmp/transitize-"$TRANSITIZE".log 2>&1
    if ! vault write  vaultron-transit/encrypt/my-key \
      plaintext="$(base64 <<< $PLAINTEXT)" >> ./tmp/transitize-"$TRANSITIZE".log 2>&1; then
      printf "${txtred}e${txtrst}"
    else
      echo >> ./tmp/transitize-"$TRANSITIZE".log 2>&1
      printf "${txtgrn}.${txtrst}"
  fi
  done
  printf "$txtrst\n"
}

check_vault
check_transit
generate_key

if ! encrypt_plaintext "$@"; then
  errors=$((errors + $?));
  msg "Problem encrypting plaintext!";
  exit $errors
else
  msg complete "Performed $1 plaintext encryption operations; logged in ./tmp/transitize-$TRANSITIZE.log"
fi
